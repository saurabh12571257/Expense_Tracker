name: Build and Deploy Expense Tracker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./tracker-backend
      run: npm ci
      
    - name: Run frontend linting (with warnings as info only)
      run: npm run lint || true
      
    - name: Run frontend tests
      run: npm test || echo "No test script found"
      
    - name: Build frontend
      run: npm run build

  build_and_push_images:
    needs: build_and_test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-backend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-backend:latest
        cache-to: type=inline

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-frontend:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-frontend:latest
        cache-to: type=inline

  deploy:
    needs: build_and_push_images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          echo "Starting deployment process..."
          
          # Pull the latest images
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-backend:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-frontend:latest
          
          # Stop and remove existing containers
          docker stop expense-tracker-backend expense-tracker-frontend || true
          docker rm expense-tracker-backend expense-tracker-frontend || true
          
          # Run PostgreSQL if not already running
          if ! docker ps | grep postgres-db; then
            docker run -d \
              --name postgres-db \
              -e POSTGRES_USER=ExpenseTracker \
              -e POSTGRES_PASSWORD=ExpenseTracker \
              -e POSTGRES_DB=postgres \
              -v postgres_data:/var/lib/postgresql/data \
              -p 5432:5432 \
              postgres:13
          fi
          
          # Run the backend container
          docker run -d \
            --name expense-tracker-backend \
            -p 5002:5002 \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e PORT=5002 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-backend:latest
          
          # Run the frontend container
          docker run -d \
            --name expense-tracker-frontend \
            -p 80:80 \
            -e VITE_API_URL=http://${{ secrets.EC2_HOST }}:5002 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/expense-tracker-frontend:latest
          
          echo "Deployment completed successfully!"